@model List<IAIFWebCatalog.Models.Company>
@{
    ViewData["Title"] = "Search Results";
    var query = ViewData["Query"] as string;
    var category = ViewData["Category"] as string;
    var industry = ViewData["Industry"] as string;
    var size = ViewData["Size"] as string;
    var sortBy = ViewData["SortBy"] as string;
    var resultCount = (int)ViewData["ResultCount"];
    var currentPage = (int)ViewData["CurrentPage"];
    var totalPages = (int)ViewData["TotalPages"];
    var categories = ViewData["Categories"] as List<IAIFWebCatalog.Models.Category>;
    var industries = ViewData["Industries"] as List<IAIFWebCatalog.Models.Industry>;
}

<!-- Search Header -->
<section class="bg-gray-900 py-8">
    <div class="container mx-auto px-4">
        <h1 class="text-2xl md:text-3xl font-bold text-white mb-6">Search Results</h1>
        <div class="relative max-w-2xl mx-auto">
            <form asp-controller="Search" asp-action="Index" method="get">
                <input type="text" name="query" value="@query" placeholder="Search companies or products..." 
                       class="w-full px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-gray-800">
                <button type="submit" class="absolute right-2 top-2 bg-primary text-black p-2 rounded-full hover:bg-yellow-600 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                </button>
            </form>
        </div>
    </div>
</section>

<!-- Filter Section -->
<section class="py-4 bg-white border-b">
    <div class="container mx-auto px-4">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <!-- Filter Options -->
            <div class="flex items-center space-x-4">
                <span class="text-gray-700">Filter by:</span>
                <form id="categoryFilterForm" asp-controller="Search" asp-action="Index" method="get" class="inline">
                    <input type="hidden" name="query" value="@query">
                    <input type="hidden" name="sortBy" value="@sortBy">
                    <input type="hidden" name="industry" value="@industry">
                    <input type="hidden" name="size" value="@size">
                    <select name="category" onchange="document.getElementById('categoryFilterForm').submit()" 
                            class="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
                        <option value="all">All Categories</option>
                        @if (categories != null)
                        {
                            @foreach (var cat in categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        }
                    </select>
                </form>
                
                <!-- Advanced Filter Button -->
                <button id="advancedFilterBtn" class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg flex items-center transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
                    </svg>
                    Advanced Filters
                </button>
            </div>
            
            <!-- Sort Options -->
            <div class="flex items-center space-x-4">
                <span class="text-gray-700">Sort by:</span>
                <form id="sortForm" asp-controller="Search" asp-action="Index" method="get" class="inline">
                    <input type="hidden" name="query" value="@query">
                    <input type="hidden" name="category" value="@category">
                    <input type="hidden" name="industry" value="@industry">
                    <input type="hidden" name="size" value="@size">
                    <input type="hidden" name="page" value="1">
                    <select name="sortBy" onchange="document.getElementById('sortForm').submit()" 
                            class="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
                        <option value="relevance">Relevance</option>
                        <option value="name-asc">Name (A-Z)</option>
                        <option value="name-desc">Name (Z-A)</option>
                        <option value="newest">Newest</option>
                    </select>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Advanced Filter Popup -->
    <div id="advancedFilterPopup" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-bold">Advanced Filters</h3>
                    <button id="closeFilterBtn" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                
                <form asp-controller="Search" asp-action="Index" method="get">
                    <input type="hidden" name="query" value="@query">
                    <input type="hidden" name="sortBy" value="@sortBy">
                    <input type="hidden" name="page" value="1">
                    
                    <!-- Category Filter -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-medium mb-2">Category</label>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                            @if (categories != null)
                            {
                                @foreach (var cat in categories)
                                {
                                    <label class="flex items-center space-x-2">
                                        <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                               name="category" value="@cat.Name" 
                                               @(category != null && category.Split(',').Contains(cat.Name) ? "checked" : "")>
                                        <span>@cat.Name</span>
                                    </label>
                                }
                            }
                        </div>
                    </div>
                    
                    <!-- Industry Filter -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-medium mb-2">Industry</label>
                        <select name="industry" class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
                            <option value="">All Industries</option>
                            @if (industries != null)
                            {
                                @foreach (var ind in industries)
                                {
                                    <option value="@ind.Name">@ind.Name</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <!-- Company Size Filter -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-medium mb-2">Company Size</label>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                            @{
                                var sizeRanges = size?.Split(',') ?? new string[0];
                            }
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                       name="size" value="1-10" @(sizeRanges.Contains("1-10") ? "checked" : "")>
                                <span>1-10 employees</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                       name="size" value="11-50" @(sizeRanges.Contains("11-50") ? "checked" : "")>
                                <span>11-50 employees</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                       name="size" value="51-200" @(sizeRanges.Contains("51-200") ? "checked" : "")>
                                <span>51-200 employees</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                       name="size" value="201-500" @(sizeRanges.Contains("201-500") ? "checked" : "")>
                                <span>201-500 employees</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                       name="size" value="501-1000" @(sizeRanges.Contains("501-1000") ? "checked" : "")>
                                <span>501-1000 employees</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" class="form-checkbox h-5 w-5 text-primary rounded focus:ring-primary" 
                                       name="size" value="1000+" @(sizeRanges.Contains("1000+") ? "checked" : "")>
                                <span>1000+ employees</span>
                            </label>
                        </div>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="flex justify-end space-x-4 mt-8">
                        <button type="button" id="resetFilterBtn" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                            Reset
                        </button>
                        <button type="submit" class="px-6 py-2 bg-primary text-black font-medium rounded-lg hover:bg-yellow-600 transition-colors">
                            Apply Filters
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>

<!-- Results Section -->
<section class="py-8">
    <div class="container mx-auto px-4">
        <p class="text-gray-600 mb-6">Showing @resultCount results for "@query"</p>
        
        @if (Model.Any())
        {
            <div class="space-y-6">
                @foreach (var company in Model)
                {
                    <div class="bg-white rounded-lg shadow-md overflow-hidden card-hover">
                        <div class="p-6 flex flex-col md:flex-row gap-6">
                            <div class="flex-shrink-0">
                                <img src="@company.ImageUrl" alt="@company.Name" class="w-24 h-24 object-cover rounded-lg">
                            </div>
                            <div class="flex-grow">
                                <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4">
                                    <div>
                                        <h3 class="text-xl font-semibold mb-2">@company.Name</h3>
                                        <p class="text-gray-600 mb-3">@company.Description</p>
                                        <div class="flex flex-wrap gap-2 mb-4">
                                            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">@(company.Category?.Name ?? "Uncategorized")</span>
                                            @if (!string.IsNullOrEmpty(company.Tags))
                                            {
                                                @foreach (var tag in company.Tags.Split(',').Take(2))
                                                {
                                                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">@tag</span>
                                                }
                                            }
                                        </div>
                                        <div class="text-sm text-gray-500">
                                            <span class="inline-flex items-center mr-4">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                </svg>
                                                @company.Address
                                            </span>
                                            <span class="inline-flex items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                                </svg>
                                                Founded: @company.FoundedYear • @company.EmployeeCount employees
                                            </span>
                                        </div>
                                    </div>
                                    <div class="flex-shrink-0 mt-4 md:mt-0">
                                        <a asp-controller="Companies" asp-action="Details" asp-route-id="@company.Id" 
                                           class="inline-block bg-primary text-black font-medium py-2 px-4 rounded-lg hover:bg-yellow-600 transition-colors">
                                            View Profile
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="mt-12 flex justify-center">
                    <nav class="inline-flex rounded-md shadow">
                        @{
                            var prevPage = Math.Max(1, currentPage - 1);
                            var nextPage = Math.Min(totalPages, currentPage + 1);
                            
                            // Create query string for pagination links
                            var queryParams = new Dictionary<string, string>();
                            if (!string.IsNullOrEmpty(query)) queryParams.Add("query", query);
                            if (!string.IsNullOrEmpty(category)) queryParams.Add("category", category);
                            if (!string.IsNullOrEmpty(industry)) queryParams.Add("industry", industry);
                            if (!string.IsNullOrEmpty(size)) queryParams.Add("size", size);
                            if (!string.IsNullOrEmpty(sortBy)) queryParams.Add("sortBy", sortBy);
                            
                            string GetPageUrl(int pageNum)
                            {
                                var pageParams = new Dictionary<string, string>(queryParams);
                                pageParams["page"] = pageNum.ToString();
                                return Url.Action("Index", "Search", pageParams);
                            }
                        }
                        
                        <a href="@GetPageUrl(prevPage)" class="py-2 px-4 bg-white border border-gray-300 rounded-l-md text-gray-700 hover:bg-gray-50 @(currentPage == 1 ? "pointer-events-none opacity-50" : "")">
                            Previous
                        </a>
                        
                        @{
                            // Display a reasonable number of page links
                            const int maxPageLinks = 5;
                            int startPage = Math.Max(1, currentPage - (maxPageLinks / 2));
                            int endPage = Math.Min(totalPages, startPage + maxPageLinks - 1);
                            
                            if (endPage - startPage + 1 < maxPageLinks)
                            {
                                startPage = Math.Max(1, endPage - maxPageLinks + 1);
                            }
                            
                            for (int i = startPage; i <= endPage; i++)
                            {
                                <a href="@GetPageUrl(i)" class="py-2 px-4 @(i == currentPage ? "bg-primary text-black border border-primary" : "bg-white border border-gray-300 text-gray-700 hover:bg-gray-50")">
                                    @i
                                </a>
                            }
                        }
                        
                        <a href="@GetPageUrl(nextPage)" class="py-2 px-4 bg-white border border-gray-300 rounded-r-md text-gray-700 hover:bg-gray-50 @(currentPage == totalPages ? "pointer-events-none opacity-50" : "")">
                            Next
                        </a>
                    </nav>
                </div>
            }
        }
        else
        {
            <div class="bg-white rounded-lg shadow-md p-8 text-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 class="text-xl font-semibold mb-2">No results found</h3>
                <p class="text-gray-600 mb-4">We couldn't find any companies matching your search criteria.</p>
                <a asp-controller="Home" asp-action="Index" class="inline-block bg-primary text-black font-medium py-2 px-6 rounded-lg hover:bg-yellow-600 transition-colors">
                    Return to Home
                </a>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set selected values in dropdowns based on current filters
            const sortBySelect = document.querySelector('select[name="sortBy"]');
            if (sortBySelect) {
                sortBySelect.value = '@sortBy';
            }
            
            const categorySelect = document.querySelector('select[name="category"]');
            if (categorySelect) {
                categorySelect.value = '@category';
            }
            
            // Advanced filter popup functionality
            const advancedFilterBtn = document.getElementById('advancedFilterBtn');
            const closeFilterBtn = document.getElementById('closeFilterBtn');
            const resetFilterBtn = document.getElementById('resetFilterBtn');
            const advancedFilterPopup = document.getElementById('advancedFilterPopup');
            
            if (advancedFilterBtn && closeFilterBtn && resetFilterBtn && advancedFilterPopup) {
                // Open filter popup
                advancedFilterBtn.addEventListener('click', function() {
                    advancedFilterPopup.classList.remove('hidden');
                    document.body.style.overflow = 'hidden'; // Prevent scrolling when popup is open
                });
                
                // Close filter popup
                closeFilterBtn.addEventListener('click', function() {
                    advancedFilterPopup.classList.add('hidden');
                    document.body.style.overflow = ''; // Re-enable scrolling
                });
                
                // Reset filter form
                resetFilterBtn.addEventListener('click', function() {
                    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
                    const selects = document.querySelectorAll('select');
                    
                    // Reset checkboxes
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = false;
                    });
                    
                    // Reset selects
                    selects.forEach(select => {
                        select.selectedIndex = 0;
                    });
                });
                
                // Close popup when clicking outside
                advancedFilterPopup.addEventListener('click', function(e) {
                    if (e.target === advancedFilterPopup) {
                        advancedFilterPopup.classList.add('hidden');
                        document.body.style.overflow = '';
                    }
                });
            }
        });
    </script>
}